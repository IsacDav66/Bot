// plugins/registerPhone.js
// Maneja el registro inicial del tel√©fono y la actualizaci√≥n del mismo,
// permitiendo la actualizaci√≥n incluso durante el proceso de registro.

const { getUserData, saveUserData, setUserRegistrationState, clearUserRegistrationState } = require('./shared-economy');

module.exports = {
    name: 'Gesti√≥n de Tel√©fono',
    aliases: [
        'mifono', 'myphone', 'setphone', 'minumero',         // Para registro inicial
        'actualizarfono', 'updatephone', 'cambiarfono' // Para actualizar
    ],
    description: 'Registra o actualiza tu n√∫mero de tel√©fono asociado al bot.',
    category: 'Configuraci√≥n',
    async execute(client, message, args, commandName) {
        const senderContact = await message.getContact();
        if (!senderContact) {
            console.error("[RegisterPhone] No se pudo obtener el contacto del remitente.");
            return message.reply("‚ùå No pude identificarte. Int√©ntalo de nuevo.");
        }
        const userId = senderContact.id._serialized;
        const user = await getUserData(userId, message);

        if (!user) { /* ... error ... */  
            console.error(`[RegisterPhone] No se pudieron obtener los datos para ${userId}`);
            return message.reply("‚ùå Hubo un error al obtener tus datos. Int√©ntalo de nuevo.");
        }

        const isUpdateCommand = ['actualizarfono', 'updatephone', 'cambiarfono'].includes(commandName.toLowerCase());
        const isInitialSetupCommand = ['mifono', 'myphone', 'setphone', 'minumero'].includes(commandName.toLowerCase());
        const userNameToMention = user.pushname || userId.split('@')[0];

        // --- L√≥gica para ACTUALIZAR N√öMERO (.actualizarfono) ---
        if (isUpdateCommand) {
            // Permitir actualizar si:
            // 1. Est√° completamente registrado (tiene contrase√±a Y n√∫mero)
            // 2. O est√° esperando el n√∫mero (puso mal .mifono y quiere corregir ANTES de la contrase√±a)
            // 3. O est√° esperando la contrase√±a por DM (puso bien el .mifono, se le envi√≥ DM, pero se dio cuenta que el n√∫mero era incorrecto)
            if (!user.phoneNumber && user.registration_state !== 'esperando_numero_telefono') {
                 // No tiene n√∫mero y no est√° en el flujo de pedirlo, entonces debe iniciar el registro.
                await message.reply(`üîí Parece que a√∫n no has iniciado el proceso de registro de n√∫mero. Por favor, usa un comando de econom√≠a como \`.work\` primero.`);
                return;
            }
            // Si no tiene contrase√±a, Y NO est√° en un estado de registro activo para n√∫mero o contrase√±a, entonces es un caso raro.
            // Pero la l√≥gica principal es que si tiene un n√∫mero o est√° esperando uno, puede actualizar.

            if (args.length === 0 || !args[0]) {
                return message.reply(`‚ùì Para actualizar tu n√∫mero, usa: \`.${commandName} +TUNUEVONUMERO\`\nTu n√∫mero actual registrado es: ${user.phoneNumber ? '+' + user.phoneNumber : 'Ninguno'}`);
            }

            let newPhoneNumberWithPlus = args[0];
            if (!/^\+\d{7,15}$/.test(newPhoneNumberWithPlus)) {
                return message.reply("‚ö†Ô∏è El formato del nuevo n√∫mero de tel√©fono no es v√°lido. Debe empezar con '+' seguido de 7 a 15 n√∫meros.");
            }

            const newPhoneNumberWithoutPlus = newPhoneNumberWithPlus.substring(1);
            if (user.phoneNumber === newPhoneNumberWithoutPlus) {
                return message.reply(`ü§î Este ya es tu n√∫mero de tel√©fono registrado (+${user.phoneNumber}).`);
            }

            const oldPhoneNumber = user.phoneNumber;
            user.phoneNumber = newPhoneNumberWithoutPlus; // Actualizar al nuevo n√∫mero
            
            let replyMessageText = `‚úÖ ¬°Tu n√∫mero de tel√©fono ha sido actualizado a *${newPhoneNumberWithPlus}*!`;
            
            // Si estaba esperando la contrase√±a por DM, o si estaba esperando el n√∫mero,
            // y ahora lo actualiza, debemos (re)enviar el DM de contrase√±a al NUEVO n√∫mero.
            if (user.registration_state === 'esperando_numero_telefono' || user.registration_state === 'esperando_contrase√±a_dm' || !user.password) {
                user.registration_state = 'esperando_contrase√±a_dm'; // Poner/mantener en este estado
                replyMessageText += `\nTe he enviado un mensaje privado (DM) a tu nuevo n√∫mero para que configures/confirmes tu contrase√±a.`;
                
                const dmChatIdFromNewPhone = `${user.phoneNumber}@c.us`;
                console.log(`[RegisterPhone - Update] N√∫mero actualizado para ${userId}. Enviando DM de contrase√±a a ${dmChatIdFromNewPhone}. Estado: esperando_contrase√±a_dm`);
                try {
                    await client.sendMessage(dmChatIdFromNewPhone, "üîë (Actualizaci√≥n de n√∫mero) Por favor, responde a este mensaje con la contrase√±a que deseas establecer/confirmar.");
                } catch (dmError) {
                    console.error(`[RegisterPhone - Update] Error enviando DM de contrase√±a a nuevo n√∫mero ${dmChatIdFromNewPhone}:`, dmError);
                    replyMessageText += "\n‚ö†Ô∏è No pude enviarte el DM al nuevo n√∫mero. Aseg√∫rate de que sea correcto y puedas recibir mensajes.";
                    // No revertir el estado, se puede intentar de nuevo con .work o similar
                }
            }
            
            await saveUserData(userId, user); // Guardar el nuevo n√∫mero y el estado
            console.log(`[RegisterPhone - Update] Usuario ${userId} (${user.pushname}) actualiz√≥ su n√∫mero de +${oldPhoneNumber || 'N/A'} a +${user.phoneNumber}. Estado: ${user.registration_state}`);
            await message.reply(replyMessageText, undefined, { mentions: [userId] });
            return;
        }

        // --- L√≥gica para REGISTRO INICIAL DE N√öMERO (.mifono) ---
        if (isInitialSetupCommand) {
            if (user.registration_state !== 'esperando_numero_telefono') {
                if (user.password && user.phoneNumber) {
                    await message.reply(`‚úÖ *${userNameToMention}*, ya est√°s completamente registrado con el n√∫mero +${user.phoneNumber}. Si quieres cambiarlo, usa \`.actualizarfono +TUNUEVONUMERO\`.`);
                } else if (user.phoneNumber && !user.password) {
                    // Si ya tiene n√∫mero y usa .mifono (quiz√°s para corregir), lo tratamos como una actualizaci√≥n.
                    // O podr√≠amos simplemente reenviar el DM de contrase√±a. Por ahora, le indicamos que use actualizarfono.
                    // O podemos asumir que quiere confirmar/cambiar y seguir el flujo de .mifono:
                    user.registration_state = 'esperando_numero_telefono'; // Forzar de nuevo este estado para que procese el n√∫mero
                    console.log(`[RegisterPhone] Usuario ${userId} (${userNameToMention}) us√≥ .mifono, ya tiene n√∫mero pero no pass. Re-entrando a flujo de n√∫mero.`);
                    // No hacer return aqu√≠, dejar que la l√≥gica de abajo procese el n√∫mero.
                } else { // No tiene n√∫mero y no est√° esperando uno.
                     await message.reply("‚ùì No estoy esperando tu n√∫mero ahora. Si necesitas registrarte, por favor usa primero un comando de econom√≠a como `.work` en un grupo.", undefined, { mentions: [userId] });
                     return;
                }
            }
            // Si lleg√≥ aqu√≠, est√° en 'esperando_numero_telefono' o lo forzamos a estarlo.

            if (args.length === 0 || !args[0]) {
                const currentPrefix = message.body.charAt(0);
                await message.reply(`‚ö†Ô∏è Por favor, proporciona tu n√∫mero de tel√©fono despu√©s del comando. Ejemplo: \`${currentPrefix}mifono +1234567890\``, undefined, { mentions: [userId] });
                return;
            }

            let phoneNumberWithPlusFromArg = args[0];
            if (!/^\+\d{7,15}$/.test(phoneNumberWithPlusFromArg)) {
                await message.reply("‚ö†Ô∏è El formato del n√∫mero de tel√©fono no es v√°lido. Debe empezar con '+' seguido de 7 a 15 n√∫meros (ej: +5211234567890). Por favor, int√©ntalo de nuevo.", undefined, { mentions: [userId] });
                return;
            }
            
            user.phoneNumber = phoneNumberWithPlusFromArg.substring(1); 
            user.registration_state = 'esperando_contrase√±a_dm';
            await saveUserData(userId, user); 
            console.log(`[RegisterPhone - Setup] N√∫mero ${user.phoneNumber} y estado 'esperando_contrase√±a_dm' guardados para ${userId} (${user.pushname}) en la BD.`);

            await message.reply(
                `üëç ¬°Gracias @${userNameToMention}!\n\n` +
                `Tu n√∫mero de tel√©fono (*${phoneNumberWithPlusFromArg}*) ha sido guardado.\n` +
                `Ahora te enviar√© un mensaje privado (DM) a ese n√∫mero para que configures tu contrase√±a. Por favor, revisa tus mensajes.`,
                undefined, { mentions: [userId] }
            );

            const dmChatIdFromPhoneNumber = `${user.phoneNumber}@c.us`;
            try {
                await client.sendMessage(dmChatIdFromPhoneNumber, "üîë (Continuaci√≥n del registro) Por favor, responde a este mensaje con la contrase√±a que deseas establecer.");
                console.log(`[RegisterPhone - Setup] DM para contrase√±a enviado a ${dmChatIdFromPhoneNumber}.`);
            } catch(dmError){ /* ... manejo de error de DM ... */ 
                console.error(`[RegisterPhone] Error EXPLICITO enviando DM para contrase√±a a ${dmChatIdFromPhoneNumber}:`, dmError);
                await message.reply(`‚ö†Ô∏è No pude enviarte el mensaje privado al n√∫mero *${phoneNumberWithPlusFromArg}*. Aseg√∫rate de que el n√∫mero sea correcto y que el bot pueda enviarle mensajes.`, undefined, { mentions: [userId] });
            }
            return;
        }

        await message.reply("‚ùì Comando no reconocido. Usa `.mifono` para el registro inicial o `.actualizarfono` para cambiar tu n√∫mero.");
    }
};