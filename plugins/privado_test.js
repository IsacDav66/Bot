// plugins/privado_test.js - Versi√≥n IGNORANDO @lid y usando n√∫mero real

// Importar fs y path si no est√°n ya
const fs = require('fs');
const path = require('path');

// Cargar config (necesario si no se asume global)
const loadGroupPaths = () => {
    const filePath = path.resolve(__dirname, '..', 'lords.json');
    try { if (!fs.existsSync(filePath)) { throw new Error(`lords.json no encontrado: ${filePath}`); }
        const data = fs.readFileSync(filePath, 'utf8'); return JSON.parse(data); }
    catch (error) { console.error('[Privado Test] Error cargando lords.json:', error.message); return {}; }
};
const groupConfig = loadGroupPaths();


module.exports = {
    name: 'privado_test',
    aliases: ['privado', 'testdm', 'holapriv'],
    category: 'Utilidad',
    description: 'Env√≠a "HOLA" al privado (ignora @lid si es necesario).',

    async execute(client, message, args) {
        const chatId = message.from; // ID del chat (grupo)
        let senderIdRaw = message.author || message.from; // ID que nos da la librer√≠a (@lid?)
        let senderNumberProvided = senderIdRaw.split('@')[0]; // N√∫mero seg√∫n librer√≠a
        const isGroupMessage = chatId.endsWith('@g.us');

        console.log(`[Privado Test] Comando ejecutado por ID raw: ${senderIdRaw}`);

        // --- Determinar el N√öMERO REAL del usuario ---
        let targetNumber = null; // El n√∫mero de tel√©fono real al que enviaremos

        // Verificar si el chat est√° configurado y tiene n√∫meros permitidos
        if (!groupConfig || !groupConfig[chatId] || !groupConfig[chatId].allowedNumbers || !Array.isArray(groupConfig[chatId].allowedNumbers)) {
            console.warn(`[Privado Test] Chat ${chatId} no configurado o sin allowedNumbers.`);
            // Podr√≠amos querer responder si el chat s√≠ est√° en el JSON pero falta allowedNumbers
             if (groupConfig[chatId]) await message.reply("‚ö†Ô∏è No hay lista de usuarios autorizados para este chat.");
            return; // Salir si no hay configuraci√≥n de permisos
        }

        const allowedNumbersList = groupConfig[chatId].allowedNumbers;

        // L√≥gica especial: SI el mensaje viene de un grupo Y el ID detectado es @lid,
        // NO podemos confiar en senderNumberProvided. Necesitamos identificar al usuario de otra forma.
        // La forma M√ÅS SIMPLE (pero menos escalable) es asumir que si el comando se ejecuta
        // en este grupo, DEBE ser uno de los allowedNumbers. Aqu√≠ asumiremos que es el
        // n√∫mero que T√ö sabes que es el correcto para Isac en ESE grupo.

        // TU N√öMERO REAL DE ISAC (REEMPLAZAR)
        const numeroRealIsac = "51959442730";

        if (isGroupMessage && senderIdRaw.endsWith('@lid')) {
             console.warn(`[Privado Test] Detectado ID @lid (${senderIdRaw}). Verificando si el n√∫mero real conocido (${numeroRealIsac}) est√° autorizado...`);
             if (allowedNumbersList.includes(numeroRealIsac)) {
                  targetNumber = numeroRealIsac; // Usar el n√∫mero real conocido
                  console.log(`[Privado Test] N√∫mero real ${targetNumber} est√° autorizado.`);
             } else {
                  console.error(`[Privado Test] El n√∫mero real conocido ${numeroRealIsac} NO est√° en allowedNumbers para ${chatId}, aunque se detect√≥ @lid.`);
                  await message.reply(`üö´ Error de configuraci√≥n: Tu n√∫mero real no est√° autorizado, y la librer√≠a detect√≥ un ID raro (@lid).`);
                  return;
             }
        } else {
            // Si no es @lid o es mensaje privado, confiamos en el n√∫mero extra√≠do SI est√° en la lista
             if (allowedNumbersList.includes(senderNumberProvided)) {
                  targetNumber = senderNumberProvided;
                  console.log(`[Privado Test] N√∫mero ${targetNumber} (de ID ${senderIdRaw}) encontrado en allowedNumbers.`);
             } else {
                  console.warn(`[Privado Test] N√∫mero ${senderNumberProvided} (de ID ${senderIdRaw}) NO est√° autorizado en ${chatId}.`);
                  await message.reply(`üö´ Tu n√∫mero (${senderNumberProvided}) no est√° autorizado para usar este comando aqu√≠.`);
                  return;
             }
        }

        // --- Si no pudimos determinar un n√∫mero v√°lido, salir ---
        if (!targetNumber) {
             console.error("[Privado Test] No se pudo determinar un n√∫mero de destino autorizado.");
             await message.reply("‚ùå No pude determinar tu n√∫mero autorizado para este comando.");
             return;
        }
        // --- Fin Determinaci√≥n N√∫mero ---


        // --- Resolver ID @c.us y Enviar ---
        let targetChatId = null;
        try {
            console.log(`[Privado Test] Resolviendo ID para el n√∫mero real/autorizado: ${targetNumber}...`);
            const numberDetails = await client.getNumberId(targetNumber); // Usar el n√∫mero correcto

            if (numberDetails) {
                targetChatId = numberDetails._serialized; // ID...@c.us
                console.log(`[Privado Test] ID de WhatsApp resuelto a: ${targetChatId}`);
            } else {
                console.warn(`[Privado Test] No se pudo resolver ID para el n√∫mero ${targetNumber}.`);
                await message.reply(`‚ùå No pude encontrar un usuario de WhatsApp para tu n√∫mero (${targetNumber}).`);
                return;
            }
        } catch (resolveError) {
            console.error(`[Privado Test] Error resolviendo ID para ${targetNumber}:`, resolveError);
            await message.reply(`‚ùå Error verificando tu n√∫mero de WhatsApp.`);
            return;
        }

        const messageToSend = "HOLA - Prueba Mensaje Privado (v4 - Forzado Num Real)";
        try {
            console.log(`[Privado Test] Intentando enviar "${messageToSend}" al ID resuelto ${targetChatId}...`);
            const sentMessage = await client.sendMessage(targetChatId, messageToSend);
            console.log('[Privado Test] Resultado:', JSON.stringify(sentMessage?.id, null, 2) || 'N/A');
            await message.reply(`‚úÖ Intent√© enviarte "${messageToSend}" a tu privado (${targetNumber}). ¬°Revisa!`);
        } catch (error) {
            console.error(`[Privado Test] Error enviando a ${targetChatId}:`, error);
            await message.reply(`‚ùå Error al enviar a tu privado (${targetChatId}). Error: ${error.message}`);
        }
        // --- Fin Env√≠o ---
    }
};